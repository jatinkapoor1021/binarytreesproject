#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include "myVector.hpp"
#include "myList.hpp"
#include "myHeap.hpp"
#include "myAVLtree.hpp"

std::vector<int> instructionsFromTxt(const std::string &filename)
{
    std::vector<int> instructions;

    std::ifstream fin(filename);

    std::string line, junk, num;

    while (std::getline(fin, line))
    {
        std::istringstream iss(line);

        std::getline(iss, junk, ' ');
        std::getline(iss, num, ' ');

        if (junk != "pop")
        {
            instructions.push_back(std::stoi(num));
        }
        else
        {
            instructions.push_back(-1);
        }
    }

    return instructions;
}

int main()
{

    std::vector<int> v1 = instructionsFromTxt("input1.txt");
    std::vector<int> v2 = instructionsFromTxt("input2.txt");
    std::vector<int> v3 = instructionsFromTxt("input3.txt");

    std::cout << "\n";

    std::cout << "-----------------------------------\n";
    vectorMedian(&v1);

    std::cout << "\n";

    vectorMedian(&v2);

    std::cout << "\n";

    vectorMedian(&v3);

    std::cout << "-----------------------------------\n";

    listMedian(&v1);

    std::cout << "\n";

    listMedian(&v2);

    std::cout << "\n";

    listMedian(&v3);

    std::cout << "-----------------------------------\n";

    heapMedian(&v1);

    std::cout << "\n";

    heapMedian(&v2);

    std::cout << "\n";

    heapMedian(&v3);

    std::cout << "-----------------------------------\n";

    treeMedian(&v1);

    std::cout << "\n";

    treeMedian(&v2);

    std::cout << "\n";

    treeMedian(&v3);

    std::cout << "-----------------------------------\n\n";
    // vectorMedian(&v);

    // std::cout << "\n";

    // listMedian(&v);

    // std::cout << "\n";

    // heapMedian(&v);

    // std::cout << "\n";

    // treeMedian(&v);

    // std::cout << "\n";

    return 0;
}

/*
22328 22506 21860 22533 20546 22706 20489 22794 20170 20156 22824 23102 20112 23312 19894 23348 20534 19844 23365 19499 19105 19006 23724 18958 23738 18754 18280 23832 18028 19260 18078 24003 17579 24034 17440 24230 16660 24664 16622 16521 16422 16341 24760 16068 15789 15752 25074 25195 15481 25301 24674 25463 25584 15446 25768 15401 17742 25772 15374 25797 26170 15077 26214 15030 26273 14918 14818 17872 26326 14667 26734 26470 26780 26872 14634 14507 25136 23448 26952 14498 27158 14445 27248 27251 14061 27432 13905 13825 18652 27804 13798 28029 13232 13115 19230 24218 26157 15407 28052
*/

/*
std::vector<int> v = {14667, 3074, 11294, 26952, 11167, 8956, 9292, 15789, 10697, 3350, 30176, 1448, 45452, 18958, 32415, 39454, 11845, 14918, 51850, 11222, 59990, 31688, 3072, 22533, 17440, 56134, 24034, 12178, 61312, 58650, 11438, 38318, 63350, 2851, 19844, 21860, 15030, 44406, 19499, 13071, 23832, 3581, 40886, 5862, 5882, 2919, 27248, 40682, 18028, 9162, 27804, 7808, 30094, 20170, 16341, 16422, 30312, 16068, 7500, 31106, 22794, 6332, 23365, 60514, 23102, 2271, 19894, 29663, 53198, 55734, 15374, 1113, 15752, 23348, 5467, 64388, 20156, 26170, 43964, 28243, 2649, 24664, 29456, 7381, 26780, 38760, 6089, 22824, 13825, 12506, 514, 7360, 63780, 24003, 20489, 31522, 41506, 25463, 31914, 25195, 12002, 46140, 42050, 11210, 5978, 10054, 26273, 63490, 49490, 3008, 53664, 59342, 65498, 16521, 30866, 12521, 747, 46530, 52274, 7557, 39478, 9987, 18754, 9116, 15401, 47606, 13115, 34774, 7285, 14634, 14445, 2199, 28052, 25797, 24760, 51012, 60826, 23724, 9196, 26734, 22328, 4666, 13905, 27251, 49252, 4897, 19006, 64376, 39910, 50468, 34316, 36560, 53230, 45768, 25768, 15446, 32649, 32908, 55860, 62868, 14507, 53360, 10854, 14498, 20112, 9758, 524, 9761, 20546, 22506, 28029, 51862, 15481, 40910, 18078, 7223, 18280, 9781, 51350, 60190, 39912, 4618, 1745, 57894, 29395, 64418, 5235, 2094, 13798, 32228, 9702, 2561, 25074, 3809, 25301, 1228, 24230, 11069, 23738, 23312, -1, -1, 6906, -1, 116, 46606, 22706, -1, -1, -1, -1, -1, -1, 19105, -1, 26872, 17579, -1, 26326, -1, 55208, 8869, -1, -1, 20534, 5258, -1, 25584, 50118, -1, 10060, -1, 62270, 37354, 7323, 16622, -1, -1, 16660, -1, 10743, -1, -1, -1, -1, -1, -1, 2871, -1, -1, 2970, 5580, -1, 19260, 25772, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4381, -1, 2880, 37360, 14818, 1237, 30472, -1, 3684, -1, -1, -1, 64004, 8616, 14061, -1, 6136, 56258, -1, 11761, -1, -1, 29046, -1, -1, 26214, -1, 24674, 10102, -1, 31612, 43006, -1, 53122, 4685, -1, 3287, 27158, -1, -1, 15077, 32984, 13232, 17742, -1, -1, 57534, -1, 7727, -1, 5362, 51494, 48558, 61758, 9891, 32443, 4254, -1, 58652, -1, -1, 58640, 10995, -1, 9956, -1, 42696, -1, -1, 17872, 3450, 3985, -1, 57538, -1, -1, -1, 58108, 26470, -1, -1, 64560, -1, -1, -1, 10141, 5506, 25136, 5908, 9780, 29787, -1, 36314, 27432, 23448, -1, -1, -1, -1, -1, -1, 57994, -1, -1, 11114, -1, 39046, -1, 5993, -1, -1, 18652, -1, -1, -1, -1, 3107, 26157, 32818, 50404, 3358, 5648, 12460, -1, -1, 55832, 19230, 6665, -1, 45310, 24218, 15407, -1, -1, -1, -1};
*/